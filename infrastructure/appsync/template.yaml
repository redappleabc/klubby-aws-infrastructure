
AWSTemplateFormatVersion: '2010-09-09'
Description: AppSync Stack
Parameters:
  ProjectName:
    Type: String
    Default: klubby
    Description: Unique Auth Name for Cognito Resources
  Stage:
    Type: String
    Default: dev
    Description: Stage of build
  UserPoolId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: userpool-id-dev
    Description: user pool id from SSM
  UserTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: user-table-name-dev
    Description: user table name
Resources:
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${ProjectName}-graphql-${Stage}'
      AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
      UserPoolConfig:
        UserPoolId: !Ref UserPoolId
        AwsRegion: us-east-1
        DefaultAction: ALLOW
        # Ref: defaultAction
  Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      # DefinitionS3Location:
      #   Ref: graphQlSchemaS3DescriptionLocation
      Definition: |
        schema {
            query: Query
            mutation: Mutation
        }
        type Query {
            getUsers: [User]
            #TODO make this [String]
            getUserWallets(username: String!): String
        }
        type User {
            username: String!
            wallets: String
        }
        type Mutation {
            # addUser(username: String!): User
            updateUser(username: String!,wallets: String!): User
        }
  UserDynamoDBTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: "UserDynamoDBTable"
      Description: The Post DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref UserTableName

  AppSyncDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: '*'

  GetUsersResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getUsers
      DataSourceName: !GetAtt UserDynamoDBTableDataSource.Name
      RequestMappingTemplate: |
        ## Below example will return all items in a table using a Scan
        ## Filtering conditions can be optionally added to scans with a "filter" and an "expression", however
        ##   if possible it is best practice to use a Query and/or Index for frequent conditionals
        ## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html#aws-appsync-resolver-mapping-template-reference-dynamodb-scan
        ## You can also paginate through records in a table by using "nextToken" and "limit", which can be
        ##   arguments passed from your GraphQL query in a client application (you can uncomment out below)
        ## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/configuring-resolvers.html#advanced-resolvers

        {
            "version" : "2017-02-28",
            "operation" : "Scan",
            ## Add 'limit' and 'nextToken' arguments to this field in your schema to implement pagination. **
            ## "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
            ## "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        #**
            Return a flat list of results from a Query or Scan operation.
        *#
        $util.toJson($ctx.result.items)

  GetUserWalletsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getUserWallets
      DataSourceName: !GetAtt UserDynamoDBTableDataSource.Name
      RequestMappingTemplate: |
        ## Below example shows how to look up an item with a Primary Key of "id" from GraphQL arguments
        ## The helper $util.dynamodb.toDynamoDBJson automatically converts to a DynamoDB formatted request
        ## There is a "context" object with arguments, identity, headers, and parent field information you can access.
        ## It also has a shorthand notation avaialable:
        ##  - $context or $ctx is the root object
        ##  - $ctx.arguments or $ctx.args contains arguments
        ##  - $ctx.identity has caller information, such as $ctx.identity.username
        ##  - $ctx.request.headers contains headers, such as $context.request.headers.xyz
        ##  - $ctx.source is a map of the parent field, for instance $ctx.source.xyz
        ## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html

        {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
                "username": $util.dynamodb.toDynamoDBJson($ctx.args.username),
            }
        }
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)

  UpdateUserResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: updateUser
      DataSourceName: !GetAtt UserDynamoDBTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "UpdateItem",
            "key" : {
                "username" : $util.dynamodb.toDynamoDBJson($context.arguments.username)
            },
            "update" : {
                "expression" : "SET wallets = :wallets",
                ## "expressionNames": {
                ##     "#url" : "url"
                ## },
                "expressionValues": {
                    ":wallets" : $util.dynamodb.toDynamoDBJson($context.arguments.wallets)
                }
            }
        }
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)