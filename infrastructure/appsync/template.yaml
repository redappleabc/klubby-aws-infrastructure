
AWSTemplateFormatVersion: '2010-09-09'
Description: AppSync Stack
Parameters:
  ProjectName:
    Type: String
    Default: klubby
    Description: Unique Auth Name for Cognito Resources
  Stage:
    Type: String
    Default: dev
    Description: Stage of build
  UserPoolId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: userpool-id-dev
    Description: user pool id from SSM
  UserTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: user-table-name-dev
    Description: user table name
  ConversationTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: conversation-table-name-dev
    Description: conversation table name
  UserConversationBridgeTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: userconversationbridge-table-name-dev
    Description: user conversation table name
  UserKlubBridgeTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: userklubbridge-table-name-dev
    Description: user conversation table name
  MessageTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: message-table-name-dev
    Description: message table name

  MessageReadTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: message-read-table-name-dev
    Description: message read table name

  AnnouncementTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: announcement-table-name-dev
    Description: announcement table name
  KlubTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: klub-table-name-dev
    Description: klub table name
  CreateKlubAvatarPresignedUrlFunctionArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: create-klub-avatar-presigned-url-function-arn-dev
    Description: create presigned url function arn
  JoinKlubFunctionArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: join-klub-function-arn-dev
    Description: join klub function arn
  ValidateAddressFunctionArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: validate-addreess-function-arn-dev
    Description: validate address function arn
  # UserStatusManageFunction:
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: user-status-manage-funtion-${Stage}
  #   Description: user status manage function
Resources:
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${ProjectName}-graphql-${Stage}'
      AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
      UserPoolConfig:
        UserPoolId: !Ref UserPoolId
        AwsRegion: us-east-1
        DefaultAction: ALLOW
        # Ref: defaultAction
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncCloudWatchRole.Arn
        ExcludeVerboseContent: true
        FieldLogLevel: ERROR
  Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: schema.graphql

  UserTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub UserDynamoDBTable_${Stage}
      Description: The Post DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref UserTableName

  ConversationTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub ConversationDynamoDBTable_${Stage}
      Description: The Conversation DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref ConversationTableName

  UserConversationBridgeTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub UserConversationBridgeDynamoDBTable_${Stage}
      Description: The User Conversation DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref UserConversationBridgeTableName

  UserKlubBridgeTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub UserKlubBridgeDynamoDBTable_${Stage}
      Description: The User Conversation DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref UserKlubBridgeTableName




  MessageTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub MessageDynamoDBTable_${Stage}
      Description: Message DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref MessageTableName


  MessageReadTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub MessageReadDynamoDBTable_${Stage}
      Description: MessageRead DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref MessageReadTableName

  AnnouncementTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub AnnouncementDynamoDBTable_${Stage}
      Description: Announcement DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref AnnouncementTableName

  KlubTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub KlubDynamoDBTable_${Stage}
      Description: The Klub DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref KlubTableName

  CreateKlubAvatarPresignedUrlFunctionDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub CreateKlubAvatarPresignedUrl_${Stage}
      Description: The lambda function to create a presigned url for image upload
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Ref CreateKlubAvatarPresignedUrlFunctionArn

  JoinKlubFunctionDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub JoinKlubFunction_${Stage}
      Description: The lambda function to join a klub for given user
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Ref JoinKlubFunctionArn

  ValidateAddressFunctionDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub ValidateAddressFunction_${Stage}
      Description: The lambda function to validate an address
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Ref ValidateAddressFunctionArn

  # UserStatusManageFunctionDataSource:
  #   Type: AWS::AppSync::DataSource
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     Name: UserStatusManageFunction
  #     Description: Lambda function to manage user status
  #     Type: AWS_LAMBDA
  #     ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
  #     LambdaConfig:
  #       LambdaFunctionArn: !Ref UserStatusManageFunction

  AppSyncDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: '*'

  AppSyncLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: '*'

  AppSyncCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncCloudWatchaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:*
                Resource: '*'



  

  ### Lambda Resolvers ###
  CreateKlubAvatarPresignedUrlResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: createKlubAvatarPresignedUrl
      DataSourceName: !GetAtt CreateKlubAvatarPresignedUrlFunctionDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/createKlubAvatarPresignedUrl.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  JoinKlubResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: joinKlub
      DataSourceName: !GetAtt JoinKlubFunctionDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/joinKlub.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  LeaveKlubResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: leaveKlub
      DataSourceName: !GetAtt UserKlubBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/leaveKlub.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  ValidateAddressResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: validateAddress
      DataSourceName: !GetAtt ValidateAddressFunctionDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/validateAddress.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  # HeartbeatResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: heartbeat
  #     DataSourceName: !GetAtt UserStatusManageFunctionDataSource.Name

  #     RequestMappingTemplate: |
  #       {
  #         "version": "2017-02-28",
  #         "operation": "Invoke",
  #         "payload": {
  #           "action": "heartbeat",
  #           "arguments":  $utils.toJson($ctx.arguments)
  #         }
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($context.result)


  CreateConversationMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createConversation"
      DataSourceName: !GetAtt ConversationTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/createConversation.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)


  # removeConversationMutationResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: "Mutation"
  #     FieldName: "removeConversation"
  #     DataSourceName: !GetAtt ConversationTableDataSource.Name
  #     RequestMappingTemplate: !Sub 
  #       - | 
  #         #set($conversationId = $context.arguments.conversationId)
  #         #set($keys_1=[])
  #         #set($key_1={})
  #         $util.qr($key_1.put("id", $util.dynamodb.toString($conversationId)))
  #         $util.qr($keys_1.add($util.dynamodb.toMapValues($key_1)))

  #         #set($keys_2=[])
  #         #set($key_2={})
  #         $util.qr($key_2.put("conversationId", $util.dynamodb.toString($conversationId)))
  #         $util.qr($keys_2.add($util.dynamodb.toMapValues($key_2)))
         
  #         {
  #             "version" : "2018-05-29",
  #             "operation" : "BatchDeleteItem",
  #             "tables":{
  #               "${ConversationTable}":  $utils.toJson($keys_1),
  #               "${UserConversationBridgeTable}" :  $utils.toJson($keys_2)
  #             }
  #         }
  #       - { 
  #           ConversationTable: !Ref ConversationTableName,
  #           UserConversationBridgeTable: !Ref UserConversationBridgeTableName
  #         }

  #     ResponseMappingTemplate: !Sub
  #       - |
  #         $utils.toJson($context.result.data["${ConversationTable}"])
  #       - { 
  #           ConversationTable: !Ref ConversationTableName
  #         }


  removeConversationMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "removeConversation"
      DataSourceName: !GetAtt ConversationTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/removeConversation.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  CreateUserConversationBridgeMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createUserConversationBridge"
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/createUserConversationBridge.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)



  # CreateUserConversationBridgeMutationResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: "Mutation"
  #     FieldName: "createUserConversationBridge"
  #     DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
  #     RequestMappingTemplate: |
  #       #set($conversation = {})
  #       #set($conversationId = $util.autoId())
  #       #set($createdAt = $util.time.nowEpochMilliSeconds())
  #       $util.qr($conversation.put("conversationId", $util.dynamodb.toString($conversationId)))
  #       $util.qr($conversation.put("createdAt", $util.dynamodb.toString($createdAt)))

  #       #set($userConversationBridges = [])
  #       #foreach($username in ${ctx.args.usernames})
  #           #set($userConversation = {})
  #           $util.qr($userConversation.put("username", $util.dynamodb.toString($username)))
  #           $util.qr($userConversation.put("conversationId", $util.dynamodb.toString($conversationId)))
  #           $util.qr($userConversation.put("name", ""))
  #           $util.qr($userConversation.put("accepted", $util.dynamodb.toBoolean(false)))
  #           $util.qr($userConversationBridges.add($util.dynamodb.toMapValues($userConversation)))
  #       #end
  #       #set($userConversation = {})
  #       $util.qr($userConversation.put("username", $util.dynamodb.toString(${context.identity.username})))
  #       $util.qr($userConversation.put("conversationId", $util.dynamodb.toString($conversationId)))
  #       $util.qr($userConversation.put("name", ""))
  #       $util.qr($userConversation.put("accepted", $util.dynamodb.toBoolean(true)))
  #       $util.qr($userConversationBridges.add($util.dynamodb.toMapValues($userConversation)))
        
  #       {
  #           "version" : "2017-02-28",
  #           "operation" : "BatchPutItem",
  #           "tables" : {
  #               "${UserConversationBridgeTable}": $utils.toJson($userConversationBridges),
  #               "${ConversationTable}": $utils.toJson([$util.dynamodb.toMapValues($conversation)])
  #           }
  #       }
  #       {
  #         UserConversationBridgeTable: !Ref UserConversationBridgeTableName,
  #         ConversationTable: !Ref ConversationTableName
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($context.result.data["${UserConversationBridgeTable}"])
  #       { 
  #         UserConversationBridgeTable: !Ref UserConversationBridgeTableName
  #       }

  AcceptConversationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "acceptConversation"
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/acceptConversation.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)
  
  RemoveUserConversationBridgeResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "removeUserConversationBridge"
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/removeUserConversationBridge.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  EditKlubMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "editKlub"
      DataSourceName: !GetAtt KlubTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/editKlub.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  CreateKlubMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createKlub"
      DataSourceName: !GetAtt KlubTableDataSource.Name
      RequestMappingTemplate: !Sub 
        - |
          #set($announcementConversationId = $util.autoId())
          #set($mainConversationId = $util.autoId())
          #set($whaleConversationId = $util.autoId())
          #set($createdAt = "$util.time.nowEpochMilliSeconds()")
          #set($conversations = [])
          #set($announcementConversation = {})
          $util.qr($announcementConversation.put("id", $announcementConversationId))
          $util.qr($announcementConversation.put("creator", $context.identity.username))
          $util.qr($announcementConversation.put("createdAt", $createdAt))

          #set($mainConversation = {})
          $util.qr($mainConversation.put("id", $mainConversationId))
          $util.qr($mainConversation.put("creator", $context.identity.username))
          $util.qr($mainConversation.put("createdAt", $createdAt))

          #set($whaleConversation = {})
          $util.qr($whaleConversation.put("id", $whaleConversationId))
          $util.qr($whaleConversation.put("creator", $context.identity.username))
          $util.qr($whaleConversation.put("createdAt", $createdAt))

          $util.qr($conversations.add($util.dynamodb.toMapValues($announcementConversation)))
          $util.qr($conversations.add($util.dynamodb.toMapValues($mainConversation)))
          $util.qr($conversations.add($util.dynamodb.toMapValues($whaleConversation)))

          ##set( $avatar = $context.arguments.avatar )
          ##set( $avatar = $util.dynamodb.toS3Object($avatar.key, $avatar.bucket, $avatar.region) )

          #set($klubs = [])
          #set($klub = {})
          $util.qr($klub.put("klubname",  { "S" : "$context.arguments.klubname" }))
          $util.qr($klub.put("owner", {  "S": "$context.identity.username" }))
          $util.qr($klub.put("assetName", {  "S": "$context.arguments.assetName" }))
          $util.qr($klub.put("assetSymbol", {  "S": "$context.arguments.assetSymbol" }))
          $util.qr($klub.put("description", {  "S": "$ctx.args.description" }))
          $util.qr($klub.put("avatar_url", {  "S": "$ctx.args.avatar_url" }))
          $util.qr($klub.put("contractAddress", {  "S": "$context.arguments.contractAddress" }))
          $util.qr($klub.put("tokenType", {  "S": "$context.arguments.tokenType" }))
          $util.qr($klub.put("announcementConversationId", {  "S": "$announcementConversationId" }))
          $util.qr($klub.put("mainGroupConversationId", {  "S": "$mainConversationId" }))
          $util.qr($klub.put("whaleGroupConversationId", {  "S": "$whaleConversationId" }))
          

          #if($context.arguments.minimumAmountForMainGroup) 
            $util.qr($klub.put("minimumAmountForMainGroup", {  "N": "$context.arguments.minimumAmountForMainGroup" } ))
          #else 
            $util.qr($klub.put("minimumAmountForMainGroup", {"N":"0"}  ))
          #end

          #if($context.arguments.minimumAmountForWhaleGroup) 
            $util.qr($klub.put("minimumAmountForWhaleGroup", {  "N": "$context.arguments.minimumAmountForWhaleGroup" } ))
          #else 
            $util.qr($klub.put("minimumAmountForWhaleGroup", {"N":"0"}  ))
          #end

          #if($context.arguments.website)
            $util.qr($klub.put("website", {  "S": "$context.arguments.website" } ))
          #else 
            $util.qr($klub.put("website", {"S":""}  ))
          #end

          #if($context.arguments.coinmarketcap)
            $util.qr($klub.put("coinmarketcap", {  "S": "$context.arguments.coinmarketcap" } ))
          #else 
            $util.qr($klub.put("coinmarketcap", {"S":""}  ))
          #end

          #if($context.arguments.coingecho)
            $util.qr($klub.put("coingecho", {  "S": "$context.arguments.coingecho" } ))
          #else 
            $util.qr($klub.put("coingecho", {"S":""}  ))
          #end

          #if($context.arguments.dextools)
            $util.qr($klub.put("dextools", {  "S": "$context.arguments.dextools" } ))
          #else 
            $util.qr($klub.put("dextools", {"S":""}  ))
          #end

          #if($context.arguments.telegram)
            $util.qr($klub.put("telegram", {  "S": "$context.arguments.telegram" } ))
          #else 
            $util.qr($klub.put("telegram", {"S":""}  ))
          #end

          #if($context.arguments.discord)
            $util.qr($klub.put("discord", {  "S": "$context.arguments.discord" } ))
          #else 
            $util.qr($klub.put("discord", {"S":""}  ))
          #end

          #if($context.arguments.twitter)
            $util.qr($klub.put("twitter", {  "S": "$context.arguments.twitter" } ))
          #else 
            $util.qr($klub.put("twitter", {"S":""}  ))
          #end

          #if($context.arguments.reddit)
            $util.qr($klub.put("reddit", {  "S": "$context.arguments.reddit" } ))
          #else 
            $util.qr($klub.put("reddit", {"S":""}  ))
          #end

          #if($context.arguments.instagram)
            $util.qr($klub.put("instagram", {  "S": "$context.arguments.instagram" } ))
          #else 
            $util.qr($klub.put("instagram", {"S":""}  ))
          #end

          $util.qr($klub.put("createdAt", $util.dynamodb.toString($createdAt) ))


          $util.qr($klubs.add($klub))


          {
            "version" : "2018-05-29",
            "operation" : "BatchPutItem",

            "tables" : {
              "${KlubTable}": $util.toJson($klubs),
              "${ConversationTable}": $util.toJson($conversations)
            }
            
          }
        - {
            KlubTable: !Ref KlubTableName,
            ConversationTable: !Ref ConversationTableName
          }
      ResponseMappingTemplate: !Sub
        - |
          ##set($klub = $context.result.data["${KlubTable}"].items[0])
          ##set($avatar = $util.dynamodb.fromS3ObjectJson($klub.avatar))
          ##set($klub.avatar = $avatar)
          ##$utils.toJson($klub)
          $utils.toJson($context.result.data["${KlubTable}"].items[0])
        - {
            KlubTable: !Ref KlubTableName,
            ConversationTable: !Ref ConversationTableName
          }

  CreateMessageMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createMessage"
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/createMessage.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)


  CreateAnnouncementMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createAnnouncement"
      DataSourceName: !GetAtt AnnouncementTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/createAnnouncement.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)


  ReplyMessageMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "replyMessage"
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/replyMessage.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  RemoveAnnouncementMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "removeAnnouncement"
      DataSourceName: !GetAtt AnnouncementTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/removeAnnouncement.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  RemoveMessageMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "removeMessage"
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/removeMessage.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  EditMessageMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: editMessage
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/editMessage.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)

  EditAnnouncementMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: editAnnouncement
      DataSourceName: !GetAtt AnnouncementTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/editAnnouncement.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)

# "filter" : {
#               "expression" : "#username <> :username",
#               "expressionNames" : {
#                   "#username" : "username"
#               },
#               "expressionValues" : {
#                   ":username" : {"S": "${context.identity.username}"}
#               }
  ListMyKlubsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listMyKlubs
      DataSourceName: !GetAtt UserKlubBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/listMyKlubs.request.vtl
      ResponseMappingTemplate: |
        #**
            Return a flat list of results from a Query or Scan operation.
        *#
        $util.toJson($ctx.result.items)

  ListUsersResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listUsers
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/listUsers.request.vtl
      ResponseMappingTemplate: |
        #**
            Return a flat list of results from a Query or Scan operation.
        *#
        $util.toJson($ctx.result.items)

  SearchUsersResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: searchUsers
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/searchUsers.request.vtl
      ResponseMappingTemplate: |
        #**
            Return a flat list of results from a Query or Scan operation.
        *#
        $util.toJson($ctx.result.items)

  GetUserWalletsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getUserWallets
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/getUserWallets.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)

  GetMeResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getMe
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/getMe.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)





  # getAllMessagesResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: getAllMessages
  #     DataSourceName: !GetAtt MessageTableDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "Query",
  #         "query" : {
  #             "expression": "conversationId = :id",
  #             "expressionValues" : {
  #                 ":id" : {
  #                     "S" : "${context.arguments.conversationId}"
  #                 }
  #             }
  #         },
  #         "limit": #if(${context.arguments.first}) ${context.arguments.first} #else 20 #end,
  #         "nextToken": #if(${context.arguments.after}) "${context.arguments.after}" #else null #end
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($context.result.items)

  ListMessagesByConversationIdResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listMessagesByConversationId
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/listMessagesByConversationId.request.vtl
      ResponseMappingTemplate: |
        {
          "messages": $utils.toJson($context.result.items),
          "nextToken": #if(${context.result.nextToken}) "${context.result.nextToken}" #else null #end
        }


  ListAnnouncementsByKlubnameResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listAnnouncementsByKlubname
      DataSourceName: !GetAtt AnnouncementTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/listAnnouncementsByKlubname.request.vtl
      ResponseMappingTemplate: |
        {
          "messages": $utils.toJson($context.result.items),
          "nextToken": #if(${context.result.nextToken}) "${context.result.nextToken}" #else null #end
        }


  SearchKlubsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: searchKlubs
      DataSourceName: !GetAtt KlubTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/searchKlub.request.vtl
      ResponseMappingTemplate: |
        #**
            Return a flat list of results from a Query or Scan operation.
        *#
        $util.toJson($ctx.result.items)

  # getAllMessagesFromResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: getAllMessagesFrom
  #     DataSourceName: !GetAtt MessageTableDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "Query",
  #         "query" : {
  #             "expression": "conversationId = :id and sender = :sender",
  #             "expressionValues" : {
  #                 ":id" : {
  #                     "S" : "${context.arguments.conversationId}"
  #                 },
  #                 ":sender" : {
  #                     "S" : "${context.arguments.sender}"
  #                 }
  #             }
  #         },
  #         "index" : "sender",
  #         "limit": #if(${context.arguments.first}) ${context.arguments.first} #else 20 #end,
  #         "nextToken": #if(${context.arguments.after}) "${context.arguments.after}" #else null #end
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($context.result.items)


  getConversationByIdQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getConversationById
      DataSourceName: !GetAtt ConversationTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/getConversationById.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)
  
  getKlubByKlubnameQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getKlubByKlubname
      DataSourceName: !GetAtt UserKlubBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/getKlubByKlubname.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  UpdateUserResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updateUser
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/updateUser.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)

  SetReadResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: setRead
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/setRead.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)



  SetMessageReadResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: setMessageRead
      DataSourceName: !GetAtt MessageReadTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/setMessageRead.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)

  ReadUserConversationBridge:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: UserConversationBridge
      FieldName: read
      DataSourceName: !GetAtt MessageReadTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/readUserConversationBridge.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result.messageId)     


  ReadMainGroup:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Klub
      FieldName: readMainGroup
      DataSourceName: !GetAtt MessageReadTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/klub/readMainGroup.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result.messageId)


  ReadWhaleGroup:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Klub
      FieldName: readWhaleGroup
      DataSourceName: !GetAtt MessageReadTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/klub/readWhaleGroup.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result.messageId) 




  # -- User Type Resolvers ---- #

  ConversationsUserResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "User"
      FieldName: "conversations"
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/user/conversationsUser.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result.items)

  KlubsUserResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "User"
      FieldName: "klubs"
      DataSourceName: !GetAtt UserKlubBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/user/klubUser.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result.items)

  # -- Klub Type Resolvers ---- #

  # announcementConversatioinKlubResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: Klub
  #     FieldName: "announcementConversatioin"
  #     DataSourceName: !GetAtt ConversationTableDataSource.Name
  #     RequestMappingTemplateS3Location: resolver-mappings/klub/announcementConversationKlub.request.vtl
  #     ResponseMappingTemplate: |
  #       $utils.toJson($context.result)

  KlubNumberMembersResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Klub
      FieldName: members
      DataSourceName: !GetAtt UserKlubBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/klub/numberOfMembers.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result.items.size())

  mainGroupConversationKlubResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Klub
      FieldName: "mainGroupConversation"
      DataSourceName: !GetAtt ConversationTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/klub/mainGroupConversationKlub.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  whaleGroupConversationKlubResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Klub
      FieldName: "whaleGroupConversation"
      DataSourceName: !GetAtt ConversationTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/klub/whaleGroupConversationKlub.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

# -- Message Type Resolvers ---- #

  OriginalMessageMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Message
      FieldName: originalMessage
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/message/getOriginalMessage.request.vtl
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)

# -- Conversation Type Resolvers ---- #

  MessagesConversationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Conversation"
      FieldName: "messages"
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/conversation/messagesConversation.request.vtl
      ResponseMappingTemplate: |
        {
          "messages": $utils.toJson($context.result.items),
          "nextToken": #if(${context.result.nextToken}) "${context.result.nextToken}" #else null #end
        }


  AnnouncementsKlubResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Klub"
      FieldName: "announcements"
      DataSourceName: !GetAtt AnnouncementTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/announcementsKlub.request.vtl
      ResponseMappingTemplate: |
        {
          "announcements": $utils.toJson($context.result.items),
          "nextToken": #if(${context.result.nextToken}) "${context.result.nextToken}" #else null #end
        }


  # -- UserKlubBridge Type Resolvers ---- #

  KlubUserKlubBridgeResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: UserKlubBridge
      FieldName: klub
      DataSourceName: !GetAtt KlubTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/userKlubBridge/klubUserKlubBridge.request.vtl
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # -- UserConversationBridge Type Resolvers ---- #

  associatedUserConversationBridgeResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: UserConversationBridge
      FieldName: associated
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/userConversationBridge/associatedField.request.vtl
      ResponseMappingTemplate: |
        $util.toJson($context.result.items)

  conversationUserConversationBridgeResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: UserConversationBridge
      FieldName: "conversation"
      DataSourceName: !GetAtt ConversationTableDataSource.Name
      RequestMappingTemplateS3Location: resolver-mappings/userConversationBridge/conversationUserConversationBridge.request.vtl
      ResponseMappingTemplate: |
        $utils.toJson($context.result)