schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

enum Status {
    online
    offline
}

type Presence {
    username: ID!
    status: Status!
}

type Conversation {

    #  A unique identifier for the Conversation.
    id: ID!

    # The Conversation's creator
    creator: String

    #  The Conversation's timestamp.
    createdAt: String

    # the lastest read message id

    read: String
    
    #  The Conversation's messages.
    messages(after: String, first: Int): MessageConnection
}

type Klub {

    # The klub's name
    klubname: String!

    # name for the associated asset
    assetName: String

    # symbol for the associated asset
    assetSymbol: String

    # avatar image for this klub
    avatar_url: String!

    # description for this klub
    description: String!

    # The creator of klub
    owner: String!

    # the blockchain network e.g. Ethereum
    #TODO only starting with eth network
    #network: String

    # the contract address 
    contractAddress: String!

    # # the blockchain explorer
    blockchainExplorer: String

    # token type e.g. ERC20, ETH or ERC721
    tokenType: String!

    # Website
    website: String

    # Social coinmarketcap
    coinmarketcap: String

    # Social coingecho
    coingecho: String

    # Social dextools
    dextools: String

    # Social telegram
    telegram: String

    # Social discord
    discord: String

    # Social twitter
    twitter: String

    # Social reddit
    reddit: String

    # Social instagram
    instagram: String

    # the link where to buy.
    # linkToBuy: String

    # threshold for owning tokens to be a member of MAIN GROUP.
    minimumAmountForMainGroup: String

    # threshold for owning tokens to be a member of WHALE GROUP.
    minimumAmountForWhaleGroup: String

    #  The Klubs's timestamp.
    createdAt: String

    members: String

    # announcementConversationId: ID!
    # This is pointer to Conversation for above announcementConversationId
    # announcementConversatioin: Conversation

    announcements: AnnouncementConnection

    mainGroupConversationId: ID!

    # This is pointer to Conversation for above mainGroupConversationId
    mainGroupConversation: Conversation

    whaleGroupConversationId: ID!

    # This is pointer to Conversation for above whaleGroupConversationId
    whaleGroupConversation: Conversation


    # latest message id for main group which I has read
    readMainGroup: String

    # latest message id for whale group which I has read
    readWhaleGroup: String


}

type Message {
    #  Generated id for a message -- read-only
    id: ID!

    #  The id of the Conversation this message belongs to. This is the table primary key.
    conversationId: ID!

    #  The message content.
    content: String!

    # The original id for a replay messages.
    originalId: ID

    # The original message for a replay messages.
    originalMessage: Message

    #  The message timestamp.
    createdAt: String

    updatedAt: String
    
    #  Flag denoting if this message has been accepted by the server or not.
    isSent: Boolean

    sender: String
}

type MessageRead {
    username: ID!
    conversationId: ID!
    messageId: String
}

type Announcement {

    #  Generated id for a message -- read-only
    id: ID!

    # The klubname this announcement belongs to.
    klubname: ID!

    title: String!

    content: String!

    #  The message timestamp.
    createdAt: String

    updatedAt: String
    
    #  Flag denoting if this announcement has been accepted by the server or not.
    isSent: Boolean

    publisher: String
    
}

type MessageConnection {
    messages: [Message]
    nextToken: String
}

type AnnouncementConnection {
    announcements: [Announcement]
    nextToken: String
}

type User {
    # This is partition key
    username: String!
    assets: [ownedAsset]
    avatarUrl: String
    wallets: [String]
    #  A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
    conversations: [UserConversationBridge]
    klubs: [UserKlubBridge]
}

type UserConversationBridge {

    # This is partition key
    username: ID!

    # This is sort key
    conversationId: ID!
    
    # The conversation name

    name: String

    accepted: Boolean

    acceptTime: String

    # The other's UserConversationBrdige. This field has resolver.
    associated: [UserConversationBridge]

    # The conversation related me. This field has resolver.
    conversation: Conversation

    # latest message id  which I has read
    read: String

}

type UserKlubBridge {

    # This is partition key
    username: ID!

    # This is sort key
    klubname: ID!

    whale: Boolean

    klub: Klub

    # latest message id for announcement which I has read
    readAnnouncement: String

}

type erc721Token {
    tokenId: String!
    tokenUri: String!
    imageUrl: String!
}

type ownedAsset{
    address: String!
    symbol: String!
    balance: String!
    contractType: String!
    name: String!
    tokens: [erc721Token]
}



type Query {

    getConversationById(conversationId: ID!): Conversation

    getKlubByKlubname(klubname: ID!): UserKlubBridge

    # get Me
    getMe: User

    getProfileAvatarByUsername(username: ID!): String

    #get user wallets
    getUserWallets(username: String!): User

    heartbeat(username: ID!): Presence

    #Scan through all values of type 'MessageConnection'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'MessageConnectionConnection' result to fetch pages.
    listMessagesByConversationId(after: String, conversationId: ID!, first: Int): MessageConnection
    listAnnouncementsByKlubname(after: String, klubname: ID!, first: Int): AnnouncementConnection

    listConversationMembers(conversationId: ID!): [User]

    listKlubMembers(klubname: ID!): [User]

    #get all the klubs the user belongs to
    listMyKlubs: [UserKlubBridge]

    #get all users
    listUsers: [User]

    # get users whose username starts with _username
    searchUsers(username: String!): [User]

    #get all klubs
    searchKlubs(klubname: String!): [Klub]

    status(username: ID!): Presence

    #For now this is not used.
    #Scan through all values of type 'Message'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'MessageConnection' result to fetch pages.
    #getAllMessages(after: String, conversationId: ID!, first: Int): [Message]

    #For now this is not being used.
    #TODO what does this do
    #getAllMessagesFrom(after: String, conversationId: ID!, first: Int, sender: String!): [Message] 

}

type Mutation {

    # addUser(username: String!): User

    acceptConversation(conversationId: ID!, username: ID!, acceptTime: String ): UserConversationBridge

    connect(username: ID!): Presence

    createAnnouncement(content: String!, klubname: ID!, title: String): Announcement

    #Create a Conversation. Use some of the cooked in template functions for UUID and DateTime.
    createConversation: Conversation

    #Create a klub
    '''createKlub(klubname: ID!, assetName: String, assetSymbol: String, avatar_url: String!,  description: String!, contractAddress: String!, tokenType: String!,
    website: String, minimumAmountForMainGroup: String, minimumAmountForWhaleGroup: String, coinmarketcap: String,
    coingecho: String, dextools: String, telegram: String, discord: String, twitter: String, reddit: String, instagram: String): Klub'''

    #Create a message in a Conversation.
    createMessage(content: String!, conversationId: ID!): Message

    #creates a presigned url that can be used to upload avatar image
    createKlubAvatarPresignedUrl(klubname: String!): String

    #Create a user conversation.
    createUserConversationBridge(conversationId: ID!, username: ID!, name: String, accepted: Boolean): UserConversationBridge

    disconnect(username: ID!): Presence

    disconnected(username: ID!): Presence

    #edit announcement in Announcement table
    editAnnouncement(klubname: ID!, id: String!, title: String!,  content: String!): Announcement

    #Edit a klub
    '''editKlub(klubname: ID!, assetName: String, assetSymbol: String, avatar_url: String!,  description: String!, contractAddress: String!, tokenType: String!,
    website: String, minimumAmountForMainGroup: String, minimumAmountForWhaleGroup: String, coinmarketcap: String,
    coingecho: String, dextools: String, telegram: String, discord: String, twitter: String, reddit: String, instagram: String): Klub'''

    #edit message in Messages table
    editMessage(conversationId: ID!, id: String!, content: String!): Message

    #Try to join given klub for given user
    joinKlub(klubname: ID!, username: ID!): String

    # Leave given klub for given user
    leaveKlub(klubname: ID!): UserKlubBridge

    #Delete the Conversation
    removeConversation(conversationId: ID!): Conversation

    #remove message in Announcement table
    removeAnnouncement(klubname: ID!, id: String!): Announcement

    #remove message in Messages table
    removeMessage(conversationId: ID!, id: String!): Message

    #Delete  UserConversationBridge
    removeUserConversationBridge(username: ID!, conversationId: ID!): UserConversationBridge

    #add reply to the message in a Conversation.
    replyMessage(content: String!, conversationId: ID!, originalId: ID!): Message

    #set message id which user read
    setRead(conversationId: ID!, username: ID!, messageId: ID!): UserConversationBridge

    setMessageRead(conversationId: ID!, messageId: ID!): MessageRead

    updateAvatarUrl(avatarUrl: String!): User

    updateWallets(username: String!,wallets: [String]!): User

    validateAddress(address: String!,contractType: String!): String
}



type Subscription  {

    onStatus(id: ID!): Presence
    @aws_subscribe(mutations: ["connect","disconnect","disconnected"])


    #Subscribes to all new announcements in a given Klub.
    subscribeToNewAnnouncement(klubname: ID!): Announcement
    @aws_subscribe(mutations:["createAnnouncement","editAnnouncement"])


    #Subscribes to all new messages in a given Conversation.
    subscribeToNewMessage(conversationId: ID!): Message
    @aws_subscribe(mutations:["createMessage","editMessage", "replyMessage"])

    subscribeToNewUserConversationBridge(username:ID!): UserConversationBridge
    @aws_subscribe(mutations: ["createUserConversationBridge"])

    subscribeToRemovedUserConversationBridge(username:ID!): UserConversationBridge
    @aws_subscribe(mutations: ["removeUserConversationBridge"])

    #Subscribes to all removed messages in a given Conversation
    subscribeToRemovedMessage(conversationId: ID!): Message
    @aws_subscribe(mutations: ["removeMessage"]) 

    #Subscribes to all removed messages in a given Klub
    subscribeToRemovedAnnouncement(klubname: ID!): Announcement
    @aws_subscribe(mutations: ["removeAnnouncement"]) 
    
    #Subscribes to read message
    subscribeToReadMessage(conversationId: ID!): UserConversationBridge
    @aws_subscribe(mutations: ["setRead"])


    #Subscribes to read message
    subscribeToMessageRead(conversationId: ID!): MessageRead
    @aws_subscribe(mutations: ["setMessageRead"])

    #Subscribes to accept conversation
    subscribeToAcceptConversation(conversationId: ID!): UserConversationBridge
    @aws_subscribe(mutations: ["acceptConversation"])
}