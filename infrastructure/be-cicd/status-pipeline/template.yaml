AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  status-pipeline

  Sample SAM Template for status-pipeline

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  IntegrationType:
    Type: String
    AllowedValues:
      - "Bitbucket"
      - "GitHub"
    Description: Enter Bitbucket or GitHub
  IntegrationUser:
    NoEcho: true
    Type: String
    MinLength: 1
    Description: Enter Bitbucket or GitHub API username
  IntegrationPass:
    NoEcho: true
    Type: String
    MinLength: 1
    Description: Enter Bitbucket or GitHub API password
  PipelineName:
    Type: String
    MinLength: 1
    Description: Name of CodePipeline pipeline
  ProjectName:
    Default: klubby
    Description: Project name
    Type: String
  Stage:
    Default: dev
    Description: The deployment stage for this stack. Used to name a variety of different resources.
    Type: String
  # EncryptionAtRest:
  #   Type: String
  #   Default: "Yes"
  #   AllowedValues: 
  #     - "Yes"
  #     - "No"
  #   Description: Enable encryption at rest for SNS topic
# Conditions:
#   UseCMK: !Equals
#     - !Ref EncryptionAtRest
#     - "Yes"

Resources:
  # SNSTopicEncryptionKey:
  #   Type: AWS::KMS::Key
  #   Condition: UseCMK
  #   Properties:
  #     Description: !Sub "CMK for SNS Topic for encryption at rest in ${AWS::StackName}"
  #     KeyPolicy:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Sid: Enable IAM User Permissions
  #         Effect: Allow
  #         Principal:
  #           AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
  #         Action: kms:*
  #         Resource: '*'
  #       - Sid: Allow administration of the key
  #         Effect: Allow
  #         Principal:
  #           AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/Admin'
  #         Action:
  #         - kms:Create*
  #         - kms:Describe*
  #         - kms:Enable*
  #         - kms:List*
  #         - kms:Put*
  #         - kms:Update*
  #         - kms:Revoke*
  #         - kms:Disable*
  #         - kms:Get*
  #         - kms:Delete*
  #         - kms:ScheduleKeyDeletion
  #         - kms:CancelKeyDeletion
  #         Resource: '*'
  #       - Sid: Allow codestar
  #         Effect: Allow
  #         Principal:
  #           Service: "codestar-notifications.amazonaws.com"
  #         Action:
  #           - kms:GenerateDataKey*
  #           - kms:Decrypt
  #         Resource: "*"
  #         Condition:
  #           StringEquals:
  #             "kms:ViaService": !Sub 'sns.${AWS::Region}.amazonaws.com'
  PipelineNotificationSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      # KmsMasterKeyId:
      #   Fn::If:
      #   - UseCMK
      #   - !Ref SNSTopicEncryptionKey
      #   - !Ref AWS::NoValue
      Subscription:
        - Endpoint: !GetAtt PipelineNotificationFunction.Arn
          Protocol: "lambda"

  PipelineNotificationSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: SnsTopicPolicy
            Effect: Allow
            Principal:
              Service: "codestar-notifications.amazonaws.com"
            Action:
              - sns:Publish
            Resource: !Ref PipelineNotificationSNSTopic
      Topics:
        - !Ref PipelineNotificationSNSTopic

  PipelineNotificationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: push_status/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          INTEGRATION_AUTH_USER: !Ref IntegrationUser
          INTEGRATION_AUTH_PASS: !Ref IntegrationPass
          INTEGRATION_TYPE: !Ref IntegrationType
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - codepipeline:GetPipelineExecution
            Resource: arn:aws:codepipeline:*:*:*

  PipelineNotificationRule:
    Type: 'AWS::CodeStarNotifications::NotificationRule'
    Properties:
      Name: !Sub '${ProjectName}-be-cicd-Pipeline-rule-${Stage}'
      DetailType: FULL
      Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${PipelineName}'
      EventTypeIds:
       - codepipeline-pipeline-pipeline-execution-failed
       - codepipeline-pipeline-pipeline-execution-canceled
       - codepipeline-pipeline-pipeline-execution-started
       - codepipeline-pipeline-pipeline-execution-resumed
       - codepipeline-pipeline-pipeline-execution-succeeded
       - codepipeline-pipeline-pipeline-execution-superseded
      Targets:
        - TargetType: SNS
          TargetAddress: !Ref PipelineNotificationSNSTopic

  SnsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PipelineNotificationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref PipelineNotificationSNSTopic

### SSM Params ###
  SNSTopicParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub be-cicd-sns-topic-${Stage}
      Type: String
      Value: !Ref PipelineNotificationSNSTopic
      Description: SSM Parameter for ios deployment sns topic
      Tags:
        Environment: !Ref Stage
