
AWSTemplateFormatVersion: '2010-09-09'
Description: AppSync Stack
Parameters:
  ProjectName:
    Type: String
    Default: klubby
    Description: Unique Auth Name for Cognito Resources
  Stage:
    Type: String
    Default: dev
    Description: Stage of build
  UserPoolId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: userpool-id-${Stage}
    Description: user pool id from SSM
  UserTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: user-table-name-${Stage}
    Description: user table name
  ConversationTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: conversation-table-name-${Stage}
    Description: conversation table name
  UserConversationBridgeTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: userconversationbridge-table-name-${Stage}
    Description: user conversation table name

  KlubConversationBridgeTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: klubconversationbridge-table-name-${Stage}
    Description: user conversation table name

  UserKlubBridgeTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: userklubbridge-table-name-${Stage}
    Description: user conversation table name
  MessageTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: message-table-name-${Stage}
    Description: message table name
  KlubTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: klub-table-name-${Stage}
    Description: klub table name
  # UserStatusManageFunction:
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: user-status-manage-funtion-${Stage}
  #   Description: user status manage function
Resources:
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${ProjectName}-graphql-${Stage}'
      AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
      UserPoolConfig:
        UserPoolId: !Ref UserPoolId
        AwsRegion: us-east-1
        DefaultAction: ALLOW
        # Ref: defaultAction
  Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      # DefinitionS3Location:
      #   Ref: graphQlSchemaS3DescriptionLocation
      Definition: |
        schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }

        enum Status {
          online
          offline
        }

        type Presence {
          username: ID!
          status: Status!
        }

        type Conversation {

          #  A unique identifier for the Conversation.
          id: ID!

          #  The Conversation's timestamp.
          createdAt: String
          
          #  The Conversation's messages.
          messages(after: String, first: Int): MessageConnection
        }

        type S3Object {
          bucket: String!
          key: String!
          region: String!
        }

        input S3ObjectInput {
          bucket: String!
          key: String!
          region: String!
        }

        type Klub {

          # The klub's name
          klubname: String!

          # avatar image for this klub
          avatar: S3Object!

          # description for this klub
          description: String!

          # The creator of klub
          owner: String!

          # the blockchain network e.g. Ethereum
          #TODO only starting with eth network
          #network: String

          # the contract address 
          contractAddress: String!

          # the blockchain explorer
          blockchainExplorer: String!

          # token type e.g. ERC20, ETH or ERC721
          tokenType: String!

          # Website
          website: String

          # Social coinmarketcap
          coinmarketcap: String

          # Social coingecho
          coingecho: String

          # Social dextools
          dextools: String

          # Social telegram
          telegram: String

          # Social discord
          discord: String

          # Social twitter
          twitter: String

          # Social reddit
          reddit: String

          # Social instagram
          instagram: String

          # the link where to buy.
          # linkToBuy: String

          # threshold for owning tokens to be a member of MAIN GROUP.
          minimumAmountForMainGroup: String

          # threshold for owning tokens to be a member of WHALE GROUP.
          minimumAmountForWhaleGroup: String

          #  The Klubs's timestamp.
          createdAt: String
         
          
        }

        type Message {
          #  Generated id for a message -- read-only
          id: ID!

          #  The id of the Conversation this message belongs to. This is the table primary key.
          conversationId: ID!

          #  The message content.
          content: String!

          # The original id for a replay messages.
          originalId: ID

          # The original message for a replay messages.
          originalMessage: Message

          #  The message timestamp.
          createdAt: String

          updatedAt: String
         
          #  Flag denoting if this message has been accepted by the server or not.
          isSent: Boolean

          sender: String
        }

        type MessageConnection {
          messages: [Message]
          nextToken: String
        }

        type User {
          # This is partition key
          username: String!
          wallets: String
          #  A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          conversations: [UserConversationBridge]
          klubs: [UserKlubBridge]
        }

        type UserConversationBridge {

          # This is partition key
          username: ID!

          # This is sort key
          conversationId: ID!
          
          # The conversation name

          name: String

          accepted: Boolean;

          # The other's UserConversationBrdige. This field has resolver.
          associated: [UserConversationBridge]

          # The conversation related me. This field has resolver.
          conversation: Conversation

          # latest message id  which I has read
          read: String

        }

        type UserKlubBridge {

          # This is partition key
          username: ID!

          # This is sort key
          klubname: ID!


          # latest message id for main group which I has read
          readMainGroup: String

          # latest message id for whale group which I has read
          readWhaleGroup: String

          # latest message id for announcement which I has read
          readAnnouncement: String

          #This is pointer to KlubConversationBridge for this Klub.
          conversations: KlubConversationBridge

        }
        
        type KlubConversationBridge {
          
          # This is partition key
          klubname: ID!


          # This is sort key
          announcementConversationId: ID!

          # This is pointer to Conversation for above announcementConversationId
          announcementConversatioin: Conversation



          # This is sort key
          mainGroupConversationId: ID!

          # This is pointer to Conversation for above mainGroupConversationId
          mainGroupConversation: Conversation


          # This is sort key
          whaleGroupConversationID: ID!

          # This is pointer to Conversation for above whaleGroupConversationId
          whaleGroupConversation: Conversation

        }


        type Query {

          # get Me
          getMe: User

          #get user wallets
          getUserWallets(username: String!): User

          heartbeat(username: ID!): Presence

          #get all klubs
          searchKlubs(klubname: String!): [Klub]

          #Scan through all values of type 'MessageConnection'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'MessageConnectionConnection' result to fetch pages.
          listMessageConnections(after: String, conversationId: ID!, first: Int): MessageConnection

          #get all users
          listUsers: [User]

          # get users whose username starts with _username
          searchUsers(username: String!): [User]

          status(username: ID!): Presence

          #For now this is not used.
          #Scan through all values of type 'Message'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'MessageConnection' result to fetch pages.
          #getAllMessages(after: String, conversationId: ID!, first: Int): [Message]

          #For now this is not being used.
          #TODO what does this do
          #getAllMessagesFrom(after: String, conversationId: ID!, first: Int, sender: String!): [Message] 

          test: User
        }

        type Mutation {

          # addUser(username: String!): User

          connect(username: ID!): Presence

          #Create a Conversation. Use some of the cooked in template functions for UUID and DateTime.
          createConversation: Conversation

          #Create a klub
          '''createKlub(klubname: ID!, avatar: S3ObjectInput!,  description: String!, contractAddress: String!, blockchainExplorer: String!, tokenType: String!, 
            website: String, minimumAmountForMainGroup: String, minimumAmountForWhaleGroup: String, coinmarketcap: String, 
            coingecho: String, dextools: String, telegram: String, discord: String, twitter: String, reddit: String, instagram: String): Klub'''

          #Create a message in a Conversation.
          createMessage(content: String!, conversationId: ID!): Message

          #Create a user conversation.
          createUserConversationBridge(conversationId: ID!, username: ID!, name: String, accepted: Boolean): UserConversationBridge

          acceptConversation(conversationId: ID!): UserConversationBridge

          disconnect(username: ID!): Presence

          disconnected(username: ID!): Presence

          #edit message in Messages table
          editMessage(conversationId: ID!, id: String!, content: String!): Message

          #Delete the Conversation
          removeConversation(conversationId: ID!): Conversation

          #remove message in Messages table
          removeMessage(conversationId: ID!, id: String!): Message

          #Delete  UserConversationBridge
          removeUserConversationBridge(username: ID!, conversationId: ID!): UserConversationBridge

          #add reply to the message in a Conversation.
          replyMessage(content: String!, conversationId: ID!, originalId: ID!): Message

          #set message id which user read
          setRead(conversationId: ID!, username: ID!, messageId: ID!): UserConversationBridge

          updateUser(username: String!,wallets: String!): User
        }



        type Subscription  {

          onStatus(id: ID!): Presence
            @aws_subscribe(mutations: ["connect","disconnect","disconnected"])

          #Subscribes to all new messages in a given Conversation.
          subscribeToNewMessage(conversationId: ID!): Message
            @aws_subscribe(mutations:["createMessage","editMessage", "replyMessage"])

          subscribeToNewUserConversationBridge(username:ID!): UserConversationBridge
            @aws_subscribe(mutations: ["createUserConversationBridge"])

          subscribeToRemovedUserConversationBridge(username:ID!): UserConversationBridge
            @aws_subscribe(mutations: ["removeUserConversationBridge"])

          #Subscribes to all removed messages in a given Conversation
          subscribeToRemovedMessage(conversationId: ID!): Message
            @aws_subscribe(mutations: ["removeMessage"]) 
          
          #Subscribes to read message
          subscribeToReadMessage(conversationId: ID!): UserConversationBridge
            @aws_subscribe(mutations: ["setRead"])
        }

  UserTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub UserDynamoDBTable_${Stage}
      Description: The Post DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref UserTableName

  ConversationTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub ConversationDynamoDBTable_${Stage}
      Description: The Conversation DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref ConversationTableName

  UserConversationBridgeTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub UserConversationBridgeDynamoDBTable_${Stage}
      Description: The User Conversation DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref UserConversationBridgeTableName

  KlubConversationBridgeTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub KlubConversationBridgeDynamoDBTable_${Stage}
      Description: The User Conversation DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref KlubConversationBridgeTableName


  UserKlubBridgeTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub UserKlubBridgeDynamoDBTable_${Stage}
      Description: The User Conversation DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref UserKlubBridgeTableName




  MessageTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub MessageDynamoDBTable_${Stage}
      Description: Message DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref MessageTableName

  KlubTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub KlubDynamoDBTable_${Stage}
      Description: The Klub DynamoDB table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: "us-east-1"
        TableName: !Ref KlubTableName


  # UserStatusManageFunctionDataSource:
  #   Type: AWS::AppSync::DataSource
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     Name: UserStatusManageFunction
  #     Description: Lambda function to manage user status
  #     Type: AWS_LAMBDA
  #     ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
  #     LambdaConfig:
  #       LambdaFunctionArn: !Ref UserStatusManageFunction

  AppSyncDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: '*'

  AppSyncLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: '*'



  

  ### Lambda Resolvers ###
  # HeartbeatResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: heartbeat
  #     DataSourceName: !GetAtt UserStatusManageFunctionDataSource.Name

  #     RequestMappingTemplate: |
  #       {
  #         "version": "2017-02-28",
  #         "operation": "Invoke",
  #         "payload": {
  #           "action": "heartbeat",
  #           "arguments":  $utils.toJson($ctx.arguments)
  #         }
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($context.result)


  ### Resolvers ###
  TestResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: test
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key": {
              "username": { "S" : "${context.identity.username}"}
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  CreateConversationMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createConversation"
      DataSourceName: !GetAtt ConversationTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key": {
              "id": { "S" : "$util.autoId()"}
          },
          "attributeValues" : {
             "id": {  "S": "$util.autoId()" },
             "createdAt": {  "S": "$util.time.nowEpochMilliSeconds()" }
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  # removeConversationMutationResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: "Mutation"
  #     FieldName: "removeConversation"
  #     DataSourceName: !GetAtt ConversationTableDataSource.Name
  #     RequestMappingTemplate: !Sub 
  #       - | 
  #         #set($conversationId = $context.arguments.conversationId)
  #         #set($keys_1=[])
  #         #set($key_1={})
  #         $util.qr($key_1.put("id", $util.dynamodb.toString($conversationId)))
  #         $util.qr($keys_1.add($util.dynamodb.toMapValues($key_1)))

  #         #set($keys_2=[])
  #         #set($key_2={})
  #         $util.qr($key_2.put("conversationId", $util.dynamodb.toString($conversationId)))
  #         $util.qr($keys_2.add($util.dynamodb.toMapValues($key_2)))
         
  #         {
  #             "version" : "2018-05-29",
  #             "operation" : "BatchDeleteItem",
  #             "tables":{
  #               "${ConversationTable}":  $utils.toJson($keys_1),
  #               "${UserConversationBridgeTable}" :  $utils.toJson($keys_2)
  #             }
  #         }
  #       - { 
  #           ConversationTable: !Ref ConversationTableName,
  #           UserConversationBridgeTable: !Ref UserConversationBridgeTableName
  #         }

  #     ResponseMappingTemplate: !Sub
  #       - |
  #         $utils.toJson($context.result.data["${ConversationTable}"])
  #       - { 
  #           ConversationTable: !Ref ConversationTableName
  #         }


  removeConversationMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "removeConversation"
      DataSourceName: !GetAtt ConversationTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "DeleteItem",
          "key" : {
            "id" : { "S" : "${context.arguments.conversationId}" }
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  CreateUserConversationBridgeMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createUserConversationBridge"
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "PutItem",
            "key": {
                "username": { "S" : "${context.arguments.username}"},
                "conversationId": { "S" : "${context.arguments.conversationId}"}
            },
            "attributeValues" : {
                "username": {  "S": "${context.arguments.username}" },
                "conversationId": {  "S": "${context.arguments.conversationId}" },
                "name": {  "S": "${context.arguments.name}" },
                "accepted": {  "BOOL": ${context.arguments.accepted} }
            }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)



  # CreateUserConversationBridgeMutationResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: "Mutation"
  #     FieldName: "createUserConversationBridge"
  #     DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
  #     RequestMappingTemplate: |
  #       #set($conversation = {})
  #       #set($conversationId = $util.autoId())
  #       #set($createdAt = $util.time.nowEpochMilliSeconds())
  #       $util.qr($conversation.put("conversationId", $util.dynamodb.toString($conversationId)))
  #       $util.qr($conversation.put("createdAt", $util.dynamodb.toString($createdAt)))

  #       #set($userConversationBridges = [])
  #       #foreach($username in ${ctx.args.usernames})
  #           #set($userConversation = {})
  #           $util.qr($userConversation.put("username", $util.dynamodb.toString($username)))
  #           $util.qr($userConversation.put("conversationId", $util.dynamodb.toString($conversationId)))
  #           $util.qr($userConversation.put("name", ""))
  #           $util.qr($userConversation.put("accepted", $util.dynamodb.toBoolean(false)))
  #           $util.qr($userConversationBridges.add($util.dynamodb.toMapValues($userConversation)))
  #       #end
  #       #set($userConversation = {})
  #       $util.qr($userConversation.put("username", $util.dynamodb.toString(${context.identity.username})))
  #       $util.qr($userConversation.put("conversationId", $util.dynamodb.toString($conversationId)))
  #       $util.qr($userConversation.put("name", ""))
  #       $util.qr($userConversation.put("accepted", $util.dynamodb.toBoolean(true)))
  #       $util.qr($userConversationBridges.add($util.dynamodb.toMapValues($userConversation)))
        
  #       {
  #           "version" : "2017-02-28",
  #           "operation" : "BatchPutItem",
  #           "tables" : {
  #               "${UserConversationBridgeTable}": $utils.toJson($userConversationBridges),
  #               "${ConversationTable}": $utils.toJson([$util.dynamodb.toMapValues($conversation)])
  #           }
  #       }
  #       {
  #         UserConversationBridgeTable: !Ref UserConversationBridgeTableName,
  #         ConversationTable: !Ref ConversationTableName
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($context.result.data["${UserConversationBridgeTable}"])
  #       { 
  #         UserConversationBridgeTable: !Ref UserConversationBridgeTableName
  #       }



  AcceptConversationUserConversationBridgeMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "acceptConversation"
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "UpdateItem",
            "key" : {
                "username" : {  "S": "${context.identity.username}" },
                "conversationId" : {  "S": "${context.arguments.conversationId}" }
            },
            "update" : {
                "expression" : "SET accepted = :accepted",
                "expressionValues": {
                    ":accepted" :  {  "BOOL": true }
                }
            }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)


  
  RemoveUserConversationBridgeMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "removeUserConversationBridge"
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "DeleteItem",
            "key": {
                "username": { "S" : "${context.arguments.username}"},
                "conversationId": { "S" : "${context.arguments.conversationId}"}
            }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  CreateKlubMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createKlub"
      DataSourceName: !GetAtt KlubTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key" : {
              "klubname" : { "S" : "${context.arguments.klubname}" }
          },
          "condition" : {
            "expression": "attribute_not_exists(klubname)"
          },
          #set( $avatar = ${context.arguments.avatar} )
          #set( $avatar = $util.dynamodb.toS3Object($avatar.key, $avatar.bucket, $avatar.region) )
          "attributeValues" : {
              "owner": {  "S": "${context.identity.username}" },
              "avatar" : $util.toJson($avatar),
              "description": {  "S": "${context.arguments.description}" },
              "contractAddress": {  "S": "${context.arguments.contractAddress}" },
              "blockchainExplorer": {  "S": "${context.arguments.blockchainExplorer}" },
              "tokenType": {  "S": "${context.arguments.tokenType}" },
              "minimumAmountForMainGroup":  #if(${context.arguments.minimumAmountForMainGroup}) {  "S": "${context.arguments.minimumAmountForMainGroup}" } #else {"S":"0"} #end,
              "minimumAmountForWhaleGroup": #if(${context.arguments.minimumAmountForWhaleGroup}) {  "S": "${context.arguments.minimumAmountForWhaleGroup}" } #else {"S":"0"} #end,
              "website": #if(${context.arguments.website}) {  "S": "${context.arguments.website}" } #else {"S":""} #end,
              "coinmarketcap": #if(${context.arguments.coinmarketcap}) {  "S": "${context.arguments.coinmarketcap}" } #else {"S":""} #end,
              "coingecho": #if(${context.arguments.coingecho}) {  "S": "${context.arguments.coingecho}" } #else {"S":""} #end,
              "dextools": #if(${context.arguments.dextools}) {  "S": "${context.arguments.dextools}" } #else {"S":""} #end,
              "telegram": #if(${context.arguments.telegram}) {  "S": "${context.arguments.telegram}" } #else {"S":""} #end,
              "discord": #if(${context.arguments.discord}) {  "S": "${context.arguments.discord}" } #else {"S":""} #end,
              "twitter": #if(${context.arguments.twitter}) {  "S": "${context.arguments.twitter}" } #else {"S":""} #end,
              "reddit": #if(${context.arguments.reddit}) {  "S": "${context.arguments.reddit}" } #else {"S":""} #end,
              "instagram": #if(${context.arguments.instagram}) {  "S": "${context.arguments.instagram}" } #else {"S":""} #end,
              "createdAt": {  "S": "$util.time.nowEpochMilliSeconds()" }
          }
        }
      ResponseMappingTemplate: |
        #set($avatar = $util.dynamodb.fromS3ObjectJson($context.result.avatar))
        #set($context.result.avatar = $avatar)
        $utils.toJson($context.result)

  CreateMessageMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createMessage"
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key" : {
              "conversationId" : { "S" : "${context.arguments.conversationId}" }
          },
          "attributeValues" : {
              "conversationId": {  "S": "${context.arguments.conversationId}" },
              "content": {  "S": "${context.arguments.content}" },
              "createdAt": {  "S": "$util.time.nowEpochMilliSeconds()" },
              "sender": {  "S": "${context.identity.username}" },
              "isSent": {  "BOOL": true },
              "id": { "S": "$util.time.nowEpochMilliSeconds()-$util.autoId()" }
          }
        }

      ResponseMappingTemplate: |
        $utils.toJson($context.result)


  ReplyMessageMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "replyMessage"
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key" : {
              "conversationId" : { "S" : "${context.arguments.conversationId}" }
          },
          "attributeValues" : {
              "conversationId": {  "S": "${context.arguments.conversationId}" },
              "content": {  "S": "${context.arguments.content}" },
              "createdAt": {  "S": "$util.time.nowEpochMilliSeconds()" },
              "sender": {  "S": "${context.identity.username}" },
              "isSent": {  "BOOL": true },
              "id": { "S": "$util.time.nowEpochMilliSeconds()-$util.autoId()" },
              "originalId": { "S": "${context.arguments.originalId}" }
          }
        }

      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  RemoveMessageMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "removeMessage"
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "DeleteItem",
          "key" : {
            "id" : { "S" : "${context.arguments.id}" },
            "conversationId": {"S" : "${context.arguments.conversationId}"}
          },
          "condition" : {
              "expression" : "#sender = :sender",
              "expressionNames" : {
                  "#sender" : "sender"
              },
              "expressionValues" : {
                  ":sender" : {"S": "${context.identity.username}"}
              }
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  
  EditMessageMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: editMessage
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "UpdateItem",
            "key" : {
              "id" : { "S" : "${context.arguments.id}" },
              "conversationId": {"S" : "${context.arguments.conversationId}"}
            },
            "condition" : {
              "expression" : "#sender = :sender",
              "expressionNames" : {
                  "#sender" : "sender"
              },
              "expressionValues" : {
                  ":sender" : {"S": "${context.identity.username}"}
              }
            },
            "update" : {
                "expression" : "SET #content = :content, #updatedAt = :updatedAt",
                "expressionNames": {
                   "#content" : "content",
                   "#updatedAt" : "updatedAt"
                 },
                "expressionValues": {
                    ":content" : $util.dynamodb.toDynamoDBJson($context.arguments.content) ,
                    ":updatedAt" : {  "S": "$util.time.nowEpochMilliSeconds()" }
                }
            }
        }
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)



  OriginalMessageMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Message
      FieldName: originalMessage
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "GetItem",
            "key" : {
              "id" : { "S" : "${context.source.originalId}" },
              "conversationId": {"S" : "${context.source.conversationId}"}
            }
        }
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)




  ListUsersResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listUsers
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Scan",
            "filter" : {
              "expression" : "#username <> :username",
              "expressionNames" : {
                  "#username" : "username"
              },
              "expressionValues" : {
                  ":username" : {"S": "${context.identity.username}"}
              }
          },
            ## Add 'limit' and 'nextToken' arguments to this field in your schema to implement pagination. **
            ## "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
            ## "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        #**
            Return a flat list of results from a Query or Scan operation.
        *#
        $util.toJson($ctx.result.items)



  SearchUsersResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: searchUsers
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Scan",
            "filter" : {
              "expression" : "#username <> :myname and begins_with(#username, :username)",
              "expressionNames" : {
                  "#username" : "username"
              },
              "expressionValues" : {
                  ":myname" : {"S": "${context.identity.username}"},
                  ":username" : {"S": "${context.arguments.username}"}
              }
            },
            ## Add 'limit' and 'nextToken' arguments to this field in your schema to implement pagination. **
            ## "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
            ## "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        #**
            Return a flat list of results from a Query or Scan operation.
        *#
        $util.toJson($ctx.result.items)




  GetUserWalletsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getUserWallets
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
                "username": $util.dynamodb.toDynamoDBJson($ctx.args.username),
            }
        }
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)

  GetMeResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getMe
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key": {
              "username": { "S" : "${context.identity.username}"}
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)


        

  ConversationsUserResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "User"
      FieldName: "conversations"
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
              "expression": "username = :username",
              "expressionValues" : {
                  ":username" : {
                      "S" : "${context.identity.username}"
                  }
              }
          },
          "scanIndexForward": false,
          "limit": 1000
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result.items)
    

  KlubsUserResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "User"
      FieldName: "klubs"
      DataSourceName: !GetAtt UserKlubBridgeTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
              "expression": "username = :username",
              "expressionValues" : {
                  ":username" : {
                      "S" : "${context.identity.username}"
                  }
              }
          },
          "scanIndexForward": false,
          "limit": 1000
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result.items)



  ConversationsUserKlubBridgeResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "UserKlubBridge"
      FieldName: "conversations"
      DataSourceName: !GetAtt KlubConversationBridgeTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
              "expression": "klubname = :klubname",
              "expressionValues" : {
                  ":klubname" : {
                      "S" : "${context.source.klubname}"
                  }
              }
          },
          "scanIndexForward": false,
          "limit": 1000
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result.items)

  # getAllMessagesResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: getAllMessages
  #     DataSourceName: !GetAtt MessageTableDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "Query",
  #         "query" : {
  #             "expression": "conversationId = :id",
  #             "expressionValues" : {
  #                 ":id" : {
  #                     "S" : "${context.arguments.conversationId}"
  #                 }
  #             }
  #         },
  #         "limit": #if(${context.arguments.first}) ${context.arguments.first} #else 20 #end,
  #         "nextToken": #if(${context.arguments.after}) "${context.arguments.after}" #else null #end
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($context.result.items)

  ListMessageConnectionsResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listMessageConnections
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
              "expression": "conversationId = :conversationId",
              "expressionValues" : {
                  ":conversationId" : {
                      "S" : "${context.arguments.conversationId}"
                  }
              }
          },
          "scanIndexForward": false,
          "limit": #if(${context.arguments.first}) ${context.arguments.first} #else 20 #end,
          "nextToken": #if(${context.arguments.after}) "${context.arguments.after}" #else null #end
        }
      ResponseMappingTemplate: |
        {
          "messages": $utils.toJson($context.result.items),
          "nextToken": #if(${context.result.nextToken}) "${context.result.nextToken}" #else null #end
        }

  SearchKlubsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: searchKlubs
      DataSourceName: !GetAtt KlubTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Scan",
            "filter" : {
              "expression" : "begins_with(#klubname, :klubname)",
              "expressionNames" : {
                  "#klubname" : "klubname"
              },
              "expressionValues" : {
                  ":klubname" : {"S": "${context.arguments.klubname}"}
              }
            },
            ## Add 'limit' and 'nextToken' arguments to this field in your schema to implement pagination. **
            ## "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
            ## "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        #**
            Return a flat list of results from a Query or Scan operation.
        *#
        $util.toJson($ctx.result.items)

  # getAllMessagesFromResolver:
  #   Type: "AWS::AppSync::Resolver"
  #   DependsOn: Schema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: getAllMessagesFrom
  #     DataSourceName: !GetAtt MessageTableDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "Query",
  #         "query" : {
  #             "expression": "conversationId = :id and sender = :sender",
  #             "expressionValues" : {
  #                 ":id" : {
  #                     "S" : "${context.arguments.conversationId}"
  #                 },
  #                 ":sender" : {
  #                     "S" : "${context.arguments.sender}"
  #                 }
  #             }
  #         },
  #         "index" : "sender",
  #         "limit": #if(${context.arguments.first}) ${context.arguments.first} #else 20 #end,
  #         "nextToken": #if(${context.arguments.after}) "${context.arguments.after}" #else null #end
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($context.result.items)

  

  MessagesConversationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: "Conversation"
      FieldName: "messages"
      DataSourceName: !GetAtt MessageTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
              "expression": "conversationId = :id",
              "expressionValues" : {
                  ":id" : {
                      "S" : "${context.source.id}"
                  }
              }
          },
          "scanIndexForward": false,
          "limit": #if(${context.arguments.first}) ${context.arguments.first} #else 20 #end,
          "nextToken": #if(${context.arguments.after}) "${context.arguments.after}" #else null #end
        }
      ResponseMappingTemplate: |
        {
          "messages": $utils.toJson($context.result.items),
          "nextToken": #if(${context.result.nextToken}) "${context.result.nextToken}" #else null #end
        }

  conversationUserConversationBridgeResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: UserConversationBridge
      FieldName: "conversation"
      DataSourceName: !GetAtt ConversationTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key" : {
              "id" : { "S" : "${context.source.conversationId}" }
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)


  associatedUserConversationBridgeResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: UserConversationBridge
      FieldName: associated
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "operation" : "Query",
          "query" : {
              "expression": "conversationId = :conversationId",
              "expressionValues" : {
                  ":conversationId" : {
                      "S" : "${context.source.conversationId}"
                  }
              }
          },
          "filter" : {
              "expression" : "#username <> :username",
              "expressionNames" : {
                  "#username" : "username"
              },
              "expressionValues" : {
                  ":username" : {"S": "${context.identity.username}"}
              }
          },
          "index": "conversationId-index"
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result.items) 
   


  UpdateUserResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updateUser
      DataSourceName: !GetAtt UserTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "UpdateItem",
            "key" : {
                "username" : $util.dynamodb.toDynamoDBJson($context.arguments.username)
            },
            "update" : {
                "expression" : "SET wallets = :wallets",
                ## "expressionNames": {
                ##     "#url" : "url"
                ## },
                "expressionValues": {
                    ":wallets" : $util.dynamodb.toDynamoDBJson($context.arguments.wallets)
                }
            }
        }
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)


  SetReadResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: setRead
      DataSourceName: !GetAtt UserConversationBridgeTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "UpdateItem",
            "key": {
                "username": { "S" : "${context.arguments.username}"},
                "conversationId": { "S" : "${context.arguments.conversationId}"}
            },
            "update" : {
                "expression" : "SET #read = :messageId",
                "expressionNames" : {
                  "#read" : "read"
                },
                "expressionValues": {
                    ":messageId" : $util.dynamodb.toDynamoDBJson($context.arguments.messageId)
                }
            }
        }
      ResponseMappingTemplate: |
        ## Pass back the result from DynamoDB. **
        $util.toJson($ctx.result)